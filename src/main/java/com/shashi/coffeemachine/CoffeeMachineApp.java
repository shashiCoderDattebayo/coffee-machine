package com.shashi.coffeemachine;

import com.shashi.coffeemachine.core.BeverageRequestable;
import com.shashi.coffeemachine.core.IngredientConsumable;
import com.shashi.coffeemachine.core.OptionsDisplayable;
import com.shashi.coffeemachine.core.OptionsReadable;
import com.shashi.coffeemachine.core.OptionsReadableImpl;
import com.shashi.coffeemachine.core.OutletConsumable;
import com.shashi.coffeemachine.core.impl.BeverageRequestableImpl;
import com.shashi.coffeemachine.core.impl.IngredientConsumableImpl;
import com.shashi.coffeemachine.core.impl.OutletConsumableImpl;
import com.shashi.coffeemachine.core.impl.SimpleOptionsDisplayableImpl;
import com.shashi.coffeemachine.data.Configuration;
import com.shashi.coffeemachine.data.ConfigurationReadable;
import com.shashi.coffeemachine.data.JsonConfigurationReadableImpl;
import com.shashi.coffeemachine.data.Machine;
import com.shashi.coffeemachine.exceptions.BusyOutletException;
import com.shashi.coffeemachine.exceptions.InsufficientIngredientException;
import com.shashi.coffeemachine.exceptions.InvalidOptionException;
import com.shashi.coffeemachine.models.BeverageRequest;
import com.shashi.coffeemachine.models.Outlet;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class CoffeeMachineApp {
    private final OutletConsumable outletConsumable;
    private final BeverageRequestable beverageRequestable;
    private final OptionsDisplayable optionsDisplayable;
    private final OptionsReadable optionsReadable;
    private final ThreadPoolExecutor threadPoolExecutor;

    public CoffeeMachineApp(Machine machine) {
        int nThreads = machine.getOutlets();
        Map<Integer, String> bevereageOptionsMap = constructBeverageOptionsMap(machine);
        IngredientConsumable ingredientConsumable = new IngredientConsumableImpl(machine.getIngredientsStock());
        this.outletConsumable = new OutletConsumableImpl(machine.getOutlets());
        this.beverageRequestable = new BeverageRequestableImpl(machine.getBeverages(), ingredientConsumable);
        this.threadPoolExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(nThreads);
        this.optionsDisplayable = new SimpleOptionsDisplayableImpl(bevereageOptionsMap);
        this.optionsReadable = new OptionsReadableImpl(bevereageOptionsMap);
    }

    private void start() {
        while (true) {
            Outlet finalOutlet = getFreeOutlet();
            BeverageRequest finalBeverageRequest = getBeverageRequest();
            threadPoolExecutor.execute(() -> {
                try {
                    beverageRequestable.serveBeverage(finalBeverageRequest, finalOutlet);
                }  catch (InsufficientIngredientException e) {
                    e.printStackTrace();
                }
            });
        }
    }

    private Outlet getFreeOutlet() {
        Outlet outlet;
        while (true) {
            try {
                outlet = outletConsumable.acquireLockAndGetFreeOutlet();
                break;
            } catch (BusyOutletException e) {
//                System.out.println("All outlets busy.");
            }
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        return outlet;
    }

    private BeverageRequest getBeverageRequest() {
        BeverageRequest beverageRequest;
        while (true) {
            try {
                optionsDisplayable.displayOptions();
                beverageRequest = optionsReadable.readOptions();
                break;
            } catch (InvalidOptionException e) {
                System.out.println("The option selected is Invalid. Please select a valid option.");
            }
        }
        return beverageRequest;
    }

    private static Map<Integer, String> constructBeverageOptionsMap(Machine machine) {
        Set<String> beverages = machine.getBeverages().keySet();
        Map<Integer, String> beverageMap = new HashMap<>();
        int i = 1;
        for (String beverage : beverages) {
            beverageMap.put(i, beverage);
            i++;
        }
        return beverageMap;
    }

    public static void main(String[] args) {
        ConfigurationReadable configurationReadable = new JsonConfigurationReadableImpl();
        Configuration configuration = configurationReadable.getConfiguration();
        Machine machine = configuration.getMachine();
        CoffeeMachineApp app = new CoffeeMachineApp(machine);
        app.start();
    }
}
